name: Release on Tag

on:
  push:
    tags:
      - 'v*' # 匹配以 'v' 开头的标签，例如 v1.0.0

jobs:
  build-and-release:
    runs-on: windows-latest # 使用 Windows 环境构建 .NET 项目

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 设置 .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      # 3. 恢复 NuGet 包
      - name: Restore dependencies
        run: dotnet restore

      # 4. 构建项目
      - name: Build project
        run: dotnet build --configuration Release

      # 5. 发布项目
      - name: Publish project
        run: dotnet publish -c Release -o ./publish
        
      - name: Zip artifacts
        shell: pwsh
        run: |
          $publishPath = Resolve-Path "./publish"
          Compress-Archive -Path "$publishPath/*" -DestinationPath "./release.zip"
          Write-Output "ZIP file size: $( (Get-Item ./release.zip).Length /1MB ) MB"
          
      # 6. 创建 GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 提供的 token
        with:
          tag_name: ${{ github.ref_name }} # 使用触发工作流的标签
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 7. 上传发布文件
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用上一步的 Release URL
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip